import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ProfileService } from '../../profile/profile.service';
import { ConnectService } from '../../connect/connect.service';
import { ROUTE_ANIMATIONS_ELEMENTS } from '../../../core/core.module';
import { Profile } from '../../models/profile.model';
import { ResponseData } from '../../models/responsedata.model';

@Component({
  selector: 'ngrxtmp-match',
  templateUrl: './match.component.html',
  styleUrls: ['./match.component.scss']
})
export class MatchComponent implements OnInit {

  constructor(private profileService: ProfileService,
    private connectService: ConnectService, private route: ActivatedRoute) { }

  username: string;
  // an attribute that can be applied to DOM elements to
  // make them animate when added to the DOM
  routeAnimationsElements = ROUTE_ANIMATIONS_ELEMENTS;

  // contains the current user's profile information
  profileData: Profile; 

  // an array of elements that contain information about
  // each profile image
  imageData: ResponseData[];

  ngOnInit() {
    this.username = this.route.snapshot.params['id'];
    this.getUserProfile(this.username);
  }

  /**
  * getUserProfile get's the current user's profile information
  * including profiledata from gitdate.json, languages from each
  * repo in gitdate.json, and profile images in assets/images
  * @param username the current user's username
  */
  getUserProfile(username: string) {
    this.profileService.getUser(username).subscribe(profileresp => {
    this.profileData = JSON.parse(atob(profileresp.content));
    const length = this.profileData.repos.length;
    for (let i = 0; i < length; i++) {
      this.connectService.getRepositoryLanguages(username, this.profileData.repos[i].url)
      .subscribe(languageresp => {
        const languages = Object.keys(languageresp);
        this.profileData.repos[i] = {
          ...this.profileData.repos[i],
          languages: languages
        };
      });
    };
  });
  // get profile images for the current user
  this.getProfileImages(username);
  }

  getProfileImages(username: string) {
    this.connectService.getProfileImages(username).subscribe(response => {
      this.imageData = this.clean(response);
    }, err => {
      // if no images are received, provide fallback profile image
      this.imageData = [new ResponseData('Images Not Found', null, null, null, null, null , null, 'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg', null, null, null, null)];
    });
  }

  /**
  * clean removes elements from the array if the name is .DS_Store
  * .DS_Store files are sometimes autogenerated in the assets/images
  * directory and can cause errors when trying to parse all files in 
  * that directory
  * @param response the response data to clean up
  */
  clean(response: ResponseData[]): ResponseData[] {
    return response.filter((elem) => elem.name !== '.DS_Store');
  }

}
