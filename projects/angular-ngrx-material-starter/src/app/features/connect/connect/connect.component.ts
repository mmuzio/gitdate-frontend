import { Component, OnInit, ViewChild } from '@angular/core';
import { ConnectService } from '../connect.service';
import { ActivatedRoute, Router } from '@angular/router';
import { ROUTE_ANIMATIONS_ELEMENTS } from '../../../core/core.module';
import { ResponseData } from '../../models/responsedata.model';
import { Profile } from '../../models/profile.model';

/**
 * ConnectComponent displays the user's profile and provides
 * actions to like or dislike the user
 */
@Component({
  selector: 'ngrxtmp-connect',
  templateUrl: './connect.component.html',
  styleUrls: ['./connect.component.scss']
})
export class ConnectComponent implements OnInit {

  /**
   * Inject necessary services
   */
  constructor(private connectService: ConnectService,
    private route: ActivatedRoute, private router: Router) { }

  /**
   * An attribute that can be applied to DOM elements to
   * make them animate when added to the DOM
   */
  routeAnimationsElements = ROUTE_ANIMATIONS_ELEMENTS;
  /**
   * the currently displayed user's profile data
   */
  profileData: Profile;

  /**
   * the currently displayed user's image data
   */
  imageData: ResponseData[];

  /**
   * the currently displayed user's username
   */
  username: string;

  /**
   * Get a user's profile on initial component load
   */
  ngOnInit() {
    this.getUserProfile();
  }

  /**
   * getUserProfile get's the user's profile information
   * including profiledata from gitdate.json, languages from each
   * repo in gitdate.json, and profile images in assets/images
   */
  getUserProfile() {
    this.connectService.getUser().subscribe(username => {
      this.username = username;
      this.connectService.getUserProfile(username).subscribe(response => {
        this.profileData = JSON.parse(atob(response.content));
        const length = this.profileData.repos.length;
        for (let i = 0; i < length; i++) {
          this.connectService.getRepositoryLanguages(username, this.profileData.repos[i].url)
            .subscribe(langResponse => {
              const languages = Object.keys(langResponse);
              this.profileData.repos[i] = {
                ...this.profileData.repos[i],
                languages: languages
              };
          });
        };
      });
      this.getProfileImages(username);
      
    });
  };

  /**
   * getProfileImages gets the current user's profile images
   * from the assets/images directory in the user's gitdate repo
   * the response is an array of type responsedata, where each element
   * represents a file in the assets/images directory.
   * @param username the current user's username
   */
  getProfileImages(username: string) {
    this.connectService.getProfileImages(username).subscribe(response => {
      this.imageData = this.clean(response);
    }, err => {
      this.imageData = [new ResponseData('Images Not Found', null, null, null, null, null , null, 'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg', null, null, null, null)];
    });
  }

  /**
   * clean removes elements from the array if the name is .DS_Store
   * .DS_Store files are sometimes autogenerated in the assets/images
   * directory and can cause errors when trying to parse all files in 
   * that directory
   * @param response the response data to clean up
   */
  clean(response: ResponseData[]): ResponseData[] {
    return response.filter((elem) => elem.name !== '.DS_Store');
  }

  /**
   * starRepository stars the user's repository by the authenticated user
   * @param repo the repository to star
   */
  starRepository(repo: string) {
    this.connectService.starRepository(this.username, repo).subscribe();
  }

  /**
   * acceptUser likes the user by the authenticated user
   */
  acceptUser() {
    this.connectService.acceptUser(this.username).subscribe(username => {
      this.getUserProfile();
    });
  }

  /**
   * rejectUser dislikes the user by the authenticated user
   */
  rejectUser() {
    this.connectService.rejectUser(this.username).subscribe(username => {
      this.getUserProfile();
    });

  }

}
